// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id            String    @id @default(cuid())
  firstName     String
  lastName      String
  email         String    @unique
  password      String
  countryCode   String?
  phone         String?
  birthDay      String?
  birthMonth    String?
  birthYear     String?
  gender        String?
  identityNumber String?
  isForeigner   Boolean   @default(false)
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  lastLoginAt   DateTime?
  status        String    @default("active")
  role          String    @default("user") // "admin" veya "user"
  canDelete     Boolean   @default(true)
  priceAlerts   PriceAlert[]
  searchFavorites SearchFavorite[]

  // İlişkiler
  accounts      Account[]
  sessions      Session[]
  reservations  Reservation[]
  payments      Payment[]
  passengers    Passenger[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Reservation {
  id          String   @id @default(cuid())
  userId      String
  type        String   // flight, hotel, car, esim
  status      String   // pending, confirmed, cancelled
  amount      Float
  currency    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  user        User     @relation(fields: [userId], references: [id])
  payment     Payment?
}

model Payment {
  id            String      @id @default(cuid())
  reservationId String      @unique
  userId        String
  amount        Float
  currency      String
  status        String      // pending, completed, failed
  provider      String      // stripe, paypal, etc.
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  user          User        @relation(fields: [userId], references: [id])
  reservation   Reservation @relation(fields: [reservationId], references: [id])
}

// Yeni model: Yolcu
model Passenger {
  id              String    @id @default(cuid())
  userId          String
  firstName       String
  lastName        String
  identityNumber  String?
  isForeigner     Boolean   @default(false)
  birthDay        String
  birthMonth      String
  birthYear       String
  gender          String
  countryCode     String?
  phone           String?
  hasMilCard      Boolean   @default(false)
  hasPassport     Boolean   @default(false)
  passportNumber  String?
  passportExpiry  DateTime?
  milCardNumber   String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  status          String    @default("active")
  isAccountOwner  Boolean   @default(false)

  user            User      @relation(fields: [userId], references: [id])

  @@unique([userId, identityNumber])
  @@index([userId])
}

model PriceAlert {
  id            String   @id @default(cuid())
  userId        String
  origin        String
  destination   String
  departureDate DateTime
  targetPrice   Float?
  lastNotifiedPrice Float?
  createdAt     DateTime @default(now())
  user          User     @relation(fields: [userId], references: [id])
}

model SearchFavorite {
  id            String   @id @default(cuid())
  userId        String
  origin        String
  destination   String
  departureDate DateTime
  createdAt     DateTime @default(now())
  user          User     @relation(fields: [userId], references: [id])
} 