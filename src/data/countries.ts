export interface Country {
  code: string;
  name: string;
  flag: string;
  phoneCode: string;
}

export const countries: Country[] = [
  { code: 'TR', name: 'TÃ¼rkiye', flag: 'ðŸ‡¹ðŸ‡·', phoneCode: '+90' },
  { code: 'DE', name: 'Almanya', flag: 'ðŸ‡©ðŸ‡ª', phoneCode: '+49' },
  { code: 'FR', name: 'Fransa', flag: 'ðŸ‡«ðŸ‡·', phoneCode: '+33' },
  { code: 'BE', name: 'BelÃ§ika', flag: 'ðŸ‡§ðŸ‡ª', phoneCode: '+32' },
  { code: 'NL', name: 'Hollanda', flag: 'ðŸ‡³ðŸ‡±', phoneCode: '+31' },
  { code: 'DK', name: 'Danimarka', flag: 'ðŸ‡©ðŸ‡°', phoneCode: '+45' },
  { code: 'GB', name: 'Ä°ngiltere', flag: 'ðŸ‡¬ðŸ‡§', phoneCode: '+44' },
  { code: 'SE', name: 'Ä°sveÃ§', flag: 'ðŸ‡¸ðŸ‡ª', phoneCode: '+46' },
  { code: 'CH', name: 'Ä°sviÃ§re', flag: 'ðŸ‡¨ðŸ‡­', phoneCode: '+41' },
  { code: 'AT', name: 'Avusturya', flag: 'ðŸ‡¦ðŸ‡¹', phoneCode: '+43' },
];

// TÃ¼rkiye'yi varsayÄ±lan olarak ilk sÄ±raya koy
export const defaultCountry = countries.find(country => country.code === 'TR') || countries[0];

// Telefon koduna gÃ¶re Ã¼lke bulma fonksiyonu
export const getCountryByPhoneCode = (phoneCode: string): Country | undefined => {
  return countries.find(country => country.phoneCode === phoneCode);
};

// Ãœlke koduna gÃ¶re Ã¼lke bulma fonksiyonu
export const getCountryByCode = (code: string): Country | undefined => {
  return countries.find(country => country.code === code);
};
